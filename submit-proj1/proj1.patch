diff -uNr /home/proj1-base/bootasm.S ./bootasm.S
--- /home/proj1-base/bootasm.S	2021-04-25 16:45:18.978868456 +0800
+++ ./bootasm.S	2021-05-06 15:11:20.000000000 +0800
@@ -41,7 +41,7 @@
   # effective memory map doesn't change during the transition.
   lgdt    gdtdesc
   movl    %cr0, %eax
-  orl     $CR0_PE, %eax
+  orl     $CR0_PE, %eax           # Protection Enable
   movl    %eax, %cr0
 
 //PAGEBREAK!
diff -uNr /home/proj1-base/.gdbint ./.gdbint
--- /home/proj1-base/.gdbint	1970-01-01 08:00:00.000000000 +0800
+++ ./.gdbint	2021-04-29 19:05:02.814851784 +0800
@@ -0,0 +1 @@
+dd-auto-load-safe path ~/proj1-revise/.gdbinit
diff -uNr /home/proj1-base/proc.c ./proc.c
--- /home/proj1-base/proc.c	2021-04-25 16:45:18.982868457 +0800
+++ ./proc.c	2021-05-06 19:33:17.000000000 +0800
@@ -7,6 +7,7 @@
 #include "proc.h"
 #include "spinlock.h"
 
+
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
@@ -217,7 +218,8 @@
   np->state = RUNNABLE;
 
   release(&ptable.lock);
-
+  if(winner)
+    yield();
   return pid;
 }
 
diff -uNr /home/proj1-base/proc.h ./proc.h
--- /home/proj1-base/proc.h	2021-04-25 16:45:18.982868457 +0800
+++ ./proc.h	2021-05-06 19:37:38.000000000 +0800
@@ -13,6 +13,7 @@
 extern struct cpu cpus[NCPU];
 extern int ncpu;
 
+int winner;
 //PAGEBREAK: 17
 // Saved registers for kernel context switches.
 // Don't need to save all the segment registers (%cs, etc),
diff -uNr /home/proj1-base/shutdown.c ./shutdown.c
--- /home/proj1-base/shutdown.c	2021-04-25 16:45:18.982868457 +0800
+++ ./shutdown.c	2021-04-28 21:40:36.000000000 +0800
@@ -7,6 +7,18 @@
 int
 main(int argc, char *argv[])
 {
-  shutdown();
+  int arg = 0;
+  int ctrl = 0;
+  char *number = "";
+  if(argc > 1){
+    number = argv[1];
+    ctrl = 1;
+  }
+  while(strlen(number)>0){
+    arg = arg * 10;
+    arg+=number[0]-'0';
+    number += 1;
+  }
+  shutdown(ctrl,arg);
   exit();
 }
diff -uNr /home/proj1-base/syscall.c ./syscall.c
--- /home/proj1-base/syscall.c	2021-04-25 16:45:18.982868457 +0800
+++ ./syscall.c	2021-05-06 19:38:57.000000000 +0800
@@ -104,6 +104,7 @@
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_shutdown(void);
+extern int sys_fork_winner(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -128,6 +129,7 @@
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_shutdown] sys_shutdown,
+[SYS_fork_winner] sys_fork_winner,
 };
 
 void
diff -uNr /home/proj1-base/sysproc.c ./sysproc.c
--- /home/proj1-base/sysproc.c	2021-04-25 16:45:18.982868457 +0800
+++ ./sysproc.c	2021-05-06 19:36:27.000000000 +0800
@@ -92,6 +92,29 @@
 
 int
 sys_shutdown(void){
+  int arg;
+  int ctrl;
+  // for(int i = 0 ; i < 40;i++){
+  //   argint(i,&arg);
+  //   cprintf("%d  :  %d\n",i,arg);
+  // }
+  if(argint(0,&ctrl) < 0){
+    return -1;
+  } 
+  if(argint(1,&arg) < 0){
+    return -1;
+  }  // the function argument is defined in file syscall.c
+  if(ctrl == 1){
+    cprintf("Leaving with code %d\n",arg);
+  }
   outw(0x604, 0x2000);
   return 0;
+}
+
+int 
+sys_fork_winner(void){
+
+  if(argint(0,&winner)<0)
+    return -1;
+  return 0;
 }
\ No newline at end of file
