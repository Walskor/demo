diff -uNr -x .git -x .gitignore /home/proj4-base/defs.h ./defs.h
--- /home/proj4-base/defs.h	2021-06-07 20:10:00.656484670 +0800
+++ ./defs.h	2021-06-16 21:27:07.307912809 +0800
@@ -68,6 +68,12 @@
 void            kfree(char*);
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
+//----------------------------------------------------------------1
+int             kcheckPage(uint pa);
+int             kaddRefer(uint pa);
+int             kfreeRefer(uint pa);
+int             kshowRefer(uint pa);
+//----------------------------------------------------------------2
 
 // kbd.c
 void            kbdintr(void);
@@ -181,6 +187,10 @@
 void            inituvm(pde_t*, char*, uint);
 int             loaduvm(pde_t*, char*, struct inode*, uint, uint);
 pde_t*          copyuvm(pde_t*, uint);
+//------------------------------------------------------------1
+pde_t*          copyuvm_new(pde_t*, uint);
+int             Handle_trap_copy_on_writing(pde_t*,char*);
+//------------------------------------------------------------2
 void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
diff -uNr -x .git -x .gitignore /home/proj4-base/forktest.c ./forktest.c
--- /home/proj4-base/forktest.c	2021-06-07 20:10:00.656484670 +0800
+++ ./forktest.c	2021-06-17 20:54:29.832494618 +0800
@@ -14,9 +14,9 @@
   int n, pid;
 
   printf(1, "fork test\n");
-
   for(n=0; n<N; n++){
     pid = fork();
+    
     if(pid < 0)
       break;
     if(pid == 0)
diff -uNr -x .git -x .gitignore /home/proj4-base/kalloc.c ./kalloc.c
--- /home/proj4-base/kalloc.c	2021-06-07 20:10:00.656484670 +0800
+++ ./kalloc.c	2021-06-17 00:29:41.288885405 +0800
@@ -12,6 +12,8 @@
 void freerange(void *vstart, void *vend);
 extern char end[]; // first address after kernel loaded from ELF file
                    // defined by the kernel linker script in kernel.ld
+char refer[65540];
+
 int free_frame_cnt=0;
 struct run {
   struct run *next;
@@ -31,6 +33,9 @@
 void
 kinit1(void *vstart, void *vend)
 {
+  for(int i = 0 ; i < 65540; i++){
+    refer[i] = (char)0;
+  }
   initlock(&kmem.lock, "kmem");
   kmem.use_lock = 0;
   freerange(vstart, vend);
@@ -48,8 +53,12 @@
 {
   char *p;
   p = (char*)PGROUNDUP((uint)vstart);
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)vend; p += PGSIZE){
+    // uint pa = V2P(p);
+    // kfreeRefer(pa);
     kfree(p);
+  }
+    
 }
 //PAGEBREAK: 21
 // Free the page of physical memory pointed at by v,
@@ -97,3 +106,66 @@
   return (char*)r;
 }
 
+
+// -----------------------------------------------------------------------------------------------------------1
+//int kcheckPage(uint pa)
+//int kaddRefer(uint pa)
+//int kfreeRefer(uint pa)
+// Add the reference number of a page
+int kaddRefer(uint pa){
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  pa = (pa >> 12);
+  refer[pa]++;
+  if(kmem.use_lock){
+    // if(refer[pa]>2)
+    // cprintf("the ++ number of %d is %d\n",pa,refer[pa]);
+    release(&kmem.lock);
+  }
+    
+  return 1;
+}
+
+// Minus the reference number of a page
+int kfreeRefer(uint pa){
+  uint paa = (pa >> 12);
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  refer[paa]--;
+  
+  if(kmem.use_lock){
+    // cprintf("the -- number of %d is %d\n",paa,refer[paa]);
+    release(&kmem.lock);
+  }
+    
+  
+  return kcheckPage(pa);
+}
+
+// Check if the reference number of page is zero, which means the page should be released.
+int kcheckPage(uint pa){
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  if(refer[pa >> 12] <= 0){
+    char *v = P2V(pa);
+    if(kmem.use_lock)
+      release(&kmem.lock);
+    kfree(v);
+    
+    return 1;
+  }
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return 0;
+}
+
+int kshowRefer(uint pa){
+  pa = (pa >> 12);
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  cprintf("the reference number of %d is %d\n",pa,refer[pa]);
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return 1;
+}
+// -----------------------------------------------------------------------------------------------------------2
\ No newline at end of file
diff -uNr -x .git -x .gitignore /home/proj4-base/mmu.h ./mmu.h
--- /home/proj4-base/mmu.h	2021-06-07 20:10:00.656484670 +0800
+++ ./mmu.h	2021-06-16 12:08:07.784462771 +0800
@@ -146,6 +146,18 @@
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
 #define PTE_FLAGS(pte)  ((uint)(pte) &  0xFFF)
 
+// modify the flags into unwritable,  retain other flags
+#define PTE_Clear_writable(pte) ((uint)(pte) & 0xFFFFFFFD) 
+
+// clear the flags units of AVL, and get ready to set these units to show "Copy on Writing"
+#define PTE_Clear_Val(pte) ((uint)(pte) & 0xFFFFF1FF)
+
+// set the flags units of AVL to be normal
+#define PTE_Set_Val_Normal(pte) ((uint)(pte) | 0x0)
+
+// set the flags units of AVL to be "Copy on Writing"
+#define PTE_Set_Val_Copy_on_Writing(pte) ((uint)(pte) | 0X200)
+
 #ifndef __ASSEMBLER__
 typedef uint pte_t;
 
diff -uNr -x .git -x .gitignore /home/proj4-base/proc.c ./proc.c
--- /home/proj4-base/proc.c	2021-06-07 20:10:00.656484670 +0800
+++ ./proc.c	2021-06-17 00:01:01.884745028 +0800
@@ -192,14 +192,29 @@
   }
 
   // Copy process state from proc.
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  //--------------------------------------------------------------------------1
+  if(np->pid <= -1){
+    if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
+  
+    kfree(np->kstack);
+    np->kstack = 0;
+    np->state = UNUSED;
+    return -1;
+    } 
+  }
+  else{
+    // cprintf("now pid %d fork into %d\n",myproc()->pid, np->pid);
+    if((np->pgdir = copyuvm_new(curproc->pgdir, curproc->sz)) == 0){
+  //--------------------------------------------------------------------------2
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
     return -1;
+    } 
   }
+  
   np->sz = curproc->sz;
-  np->parent = curproc;
+  np->parent = curproc; 
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -224,7 +239,7 @@
   }
 
   release(&ptable.lock);
-
+  // cprintf("before fork return in now pid %d fork into %d\n",myproc()->pid, pid);
   return pid;
 }
 
diff -uNr -x .git -x .gitignore /home/proj4-base/trap.c ./trap.c
--- /home/proj4-base/trap.c	2021-06-07 20:10:00.656484670 +0800
+++ ./trap.c	2021-06-16 18:42:00.363854726 +0800
@@ -77,6 +77,18 @@
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
+  // --------------------------------------------------------------------------------------------1
+  case T_PGFLT:
+    // cprintf("get pgflt\n");
+    if((tf->err & 0b111) == 0b111){   // a user process are to write on a protected page
+      char *a = (char*)rcr2();
+      pde_t* pgdir = myproc()->pgdir;
+      Handle_trap_copy_on_writing(pgdir, a);
+      // cprintf("write err end in pid: %d \n", myproc()->pid);
+      }
+      break;
+
+  // --------------------------------------------------------------------------------------------2
 
   //PAGEBREAK: 13
   default:
diff -uNr -x .git -x .gitignore /home/proj4-base/user.h ./user.h
--- /home/proj4-base/user.h	2021-06-07 20:10:00.660484670 +0800
+++ ./user.h	2021-06-16 22:30:44.080242386 +0800
@@ -38,3 +38,5 @@
 void* malloc(uint);
 void free(void*);
 int atoi(const char*);
+
+int kshowRefer(uint);
\ No newline at end of file
diff -uNr -x .git -x .gitignore /home/proj4-base/vm.c ./vm.c
--- /home/proj4-base/vm.c	2021-06-07 20:10:00.660484670 +0800
+++ ./vm.c	2021-06-17 00:49:43.488756748 +0800
@@ -8,6 +8,7 @@
 #include "elf.h"
 
 extern char data[];  // defined by kernel.ld
+
 pde_t *kpgdir;  // for use in scheduler()
 
 // Set up CPU's kernel segment descriptors.
@@ -70,6 +71,7 @@
       return -1;
     if(*pte & PTE_P)
       panic("remap");
+    
     *pte = pa | perm | PTE_P;
     if(a == last)
       break;
@@ -79,6 +81,8 @@
   return 0;
 }
 
+
+
 // There is one page table per process, plus one that's used when
 // a CPU is not running any process (kpgdir). The kernel uses the
 // current process's page table during system calls and interrupts;
@@ -121,7 +125,7 @@
   pde_t *pgdir;
   struct kmap *k;
 
-  if((pgdir = (pde_t*)kalloc()) == 0)
+  if((pgdir = (pde_t*)kalloc()) == 0)    // 分配新的内核页面，会造成一个页面的减少。
     return 0;
   memset(pgdir, 0, PGSIZE);
   if (P2V(PHYSTOP) > (void*)DEVSPACE)
@@ -189,7 +193,12 @@
   mem = kalloc();
   memset(mem, 0, PGSIZE);
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+
   memmove(mem, init, sz);
+  // -----------------------------------------------------------------------------------------------------------1
+    // add the reference number of the page
+  kaddRefer(V2P(mem));
+  // -----------------------------------------------------------------------------------------------------------2
 }
 
 // Load a program segment into pgdir.  addr must be page-aligned
@@ -244,6 +253,10 @@
       kfree(mem);
       return 0;
     }
+    // -----------------------------------------------------------------------------------------------------------1
+    // add the reference number of the page
+    kaddRefer(V2P(mem));
+    // -----------------------------------------------------------------------------------------------------------2
   }
   return newsz;
 }
@@ -269,9 +282,13 @@
     else if((*pte & PTE_P) != 0){
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-        panic("kfree");
-      char *v = P2V(pa);
-      kfree(v);
+        panic("kfree in deallocnvm");
+      // char *v = P2V(pa);
+      // kfree(v);
+      // -------------------------------------------------------------------------1
+      // change free to checkPage
+      kfreeRefer(pa);
+      // -------------------------------------------------------------------------2
       *pte = 0;
     }
   }
@@ -284,6 +301,7 @@
 freevm(pde_t *pgdir)
 {
   uint i;
+  
 
   if(pgdir == 0)
     panic("freevm: no pgdir");
@@ -292,6 +310,12 @@
     if(pgdir[i] & PTE_P){
       char * v = P2V(PTE_ADDR(pgdir[i]));
       kfree(v);
+      // -------------------------------------------------------------------------1
+      // change free to checkPage
+      // uint pa;
+      // pa = PTE_ADDR(pgdir[i]);
+      // kfreeRefer(pa);
+      // -------------------------------------------------------------------------2
     }
   }
   kfree((char*)pgdir);
@@ -341,6 +365,99 @@
   freevm(d);
   return 0;
 }
+//-----------------------------------------------------------------------------------------------------------------1
+  pde_t*
+  copyuvm_new(pde_t *pgdir, uint sz)
+  {
+    pde_t *d;
+    pte_t *pte;
+    uint pa, i, flags;
+    // cprintf("Get into copy from pid: %d ,  sz = %d\n", myproc()->pid,sz);
+    // cprintf("before setupkvm in pid: %d\n", myproc()->pid);
+    // make a new kernal page table directory
+    if((d = setupkvm()) == 0)
+      return 0;
+    // cprintf("after setupkvm in pid: %d\n", myproc()->pid);
+    // copy all the PTE from parent 
+    for(i = 0; i < sz; i += PGSIZE){
+      // cprintf("before walkpgdir in pid: %d\n",myproc()->pid);
+      if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+        panic("copyuvm: pte should exist");
+      // cprintf("after walkpgdir in pid: %d\n",myproc()->pid);
+      if(!(*pte & PTE_P))
+        panic("copyuvm: page not present");
+      /* --------------------------------------do not allocate new pages ------*/
+      
+      
+      pa = PTE_ADDR(*pte);    
+      // cprintf("before change flags    ");
+      // kshowRefer(pa);   
+      flags = PTE_FLAGS(*pte);
+
+      flags = PTE_Clear_writable(flags);       
+      flags = PTE_Clear_Val(flags);     
+      flags = PTE_Set_Val_Copy_on_Writing(flags);
+      // if((mem = kalloc()) == 0)
+      //   goto bad;
+      // memmove(mem, (char*)P2V(pa), PGSIZE);
+      // *pte = V2P(pa) | flags;
+      *pte = pa | flags;
+      // cprintf("flags : %x , pte : %x \n",flags, *pte);
+      
+      if(mappages(d, (void*)i, PGSIZE, pa, flags) < 0)
+        goto bad;
+      // -----------------------------------------------------------------------------------------------------------1
+      // add the reference number of the page
+      kaddRefer(pa);
+     // -----------------------------------------------------------------------------------------------------------2
+      // cprintf("after change flags    ");
+      // kshowRefer(pa);  
+      lcr3(V2P(pgdir));
+      // lcr3(V2P(d));
+      // cprintf("after mappages\n");
+    }
+    return d;
+
+  bad:
+    lcr3(V2P(pgdir));
+    // lcr3(V2P(d));
+    freevm(d);
+    return 0;
+  }
+
+int Handle_trap_copy_on_writing(pde_t *pgdir, char *a){
+  pte_t *pte;
+  uint pa, flags;
+  char *mem;
+  if((pte = walkpgdir(myproc()->pgdir, a, 0)) == 0){
+        return -1;
+  }
+  // cprintf("Handle trap copy on Writing address: %d in pid : %d        \n",PTE_ADDR(*pte),myproc()->pid);
+  if((((*pte) & PTE_W) == 0 ) && ((((*pte) >> 9) & 0b111) == 0b001)){  // unwritable && copy_on_writing
+    // cprintf("get inside if\n");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    flags = PTE_Clear_Val(flags);
+    flags = flags | PTE_W;
+    
+    if((mem = kalloc()) == 0){
+      kfree(mem);
+      return 0;
+    }
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+    kfreeRefer(pa);       
+    //   remap
+    *pte = V2P(mem) | flags | PTE_P;
+    kaddRefer(PTE_ADDR(*pte));
+    // kshowRefer(PTE_ADDR(*pte));
+    lcr3(V2P(pgdir));
+
+    return 1;
+  }
+  return 0;
+  
+}
+//-----------------------------------------------------------------------------------------------------------------2
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
